const assert = require("assert");
const anchor = require('@project-serum/anchor');

describe("iot", () => {
  // Configure the client to use the local cluster.
  anchor.setProvider(anchor.Provider.env());

  // Program client handle.
  // const program = anchor.workspace.Iot;

  const idl = JSON.parse(require('fs').readFileSync('./target/idl/iot.json', 'utf8'));

  // Address of the deployed program.
  const programId = new anchor.web3.PublicKey('38ksDUsErbv4NeK88Y7mXEEeQb7ne9V3AYAVbf1QDZ3F');

  // Generate the program client from IDL.
  const program = new anchor.Program(idl, programId);

  // Iot Data Store account.
  const iotDataStore = anchor.web3.Keypair.generate();

  it("Creates an IOT Data Store", async () => {
    // Add your test here.

    await program.rpc.createIotDataStore("Test Iot Data", {
      accounts: {
        iotDataStore: iotDataStore.publicKey,
        rent: anchor.web3.SYSVAR_RENT_PUBKEY,
      },
      instructions: [
        await program.account.iotDataStore.createInstruction(iotDataStore),
      ],
      signers: [iotDataStore],
    });

    const iot_data = await program.account.iotDataStore.fetch(iotDataStore.publicKey);
    const name = new TextDecoder("utf-8").decode(new Uint8Array(iot_data.name));
    assert.ok(name.startsWith("Test Iot Data")); // [u8; 280] => trailing zeros.
    assert.ok(iot_data.iotDataFeed.length === 33607);
    assert.ok(iot_data.head.toNumber() === 0);
    assert.ok(iot_data.tail.toNumber() === 0);
  });

  it("Creates a iot source", async () => {
    const authority = program.provider.wallet.publicKey;
    await program.rpc.createIotSource("My Iot Source", {
      accounts: {
        iotSource: await program.account.iotSource.associatedAddress(authority),
        authority,
        rent: anchor.web3.SYSVAR_RENT_PUBKEY,
        systemProgram: anchor.web3.SystemProgram.programId,
      },
    });
    const account = await program.account.iotSource.associated(authority);
    assert.ok(account.name === "My Iot Source");
    assert.ok(account.authority.equals(authority));
  });

  it("Sends iot source", async () => {
    const authority = program.provider.wallet.publicKey;
    const iotSource = await program.account.iotSource.associatedAddress(authority);

    // Only send a couple messages so the test doesn't take an eternity.
    const numMessages = 100;

    // Generate random message strings.
    /*const messages = new Array(numMessages).fill("").map((msg) => {
      return (
        "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0"
        //Math.random().toString(36).substring(2, 15) +
        //Math.random().toString(36).substring(2, 15)
      );
    });*/

    const messages = [
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0",
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0",
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0",
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0",
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0",
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0",
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0",
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0",
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0",
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0",
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0",
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0",
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0",
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0",
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0",
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0",
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0",
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0",
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0",
      "-9.8184 0.009971 0.29563 0.0041863 0.0041863 2.1849 -9.6967 0.63077 0.1039 -0.84053 -0.68762 -0.37 -0.36327 0.29963 -8.6499 -4.5781 0.18776 -0.44902 -1.0103 0.034483 -2.35 -1.6102 -0.030899 0",
      "-9.8489 0.52404 0.37348 0.0041863 0.016745 2.3876 -9.508 0.68389 0.085343 -0.83865 -0.68369 -0.19799 -0.18151 0.58298 -8.6275 -4.3198 0.023595 -0.44902 -1.0103 0.034483 -2.1632 -0.88254 0.32657 0",
      "-9.6602 0.18185 0.43742 0.016745 0.037677 2.4086 -9.5674 0.68113 0.085343 -0.83865 -0.68369 -0.37417 0.18723 0.43851 -8.5055 -4.2772 0.27572 -0.44902 -1.0103 0.034483 -1.6175 -0.16562 -0.030693 0",
      "-9.6507 0.21422 0.24033 0.07954 0.11722 2.1814 -9.4301 0.55031 0.085343 -0.83865 -0.68369 -0.017271 0.18366 0.57571 -8.6279 -4.3163 0.36752 -0.45686 -1.0082 0.025862 -1.0771 0.0069451 -0.38262 0",
      "-9.703 0.30389 0.31156 0.22187 0.20513 2.4173 -9.3889 0.71098 0.085343 -0.83865 -0.68369 -0.37439 -0.54671 0.44586 -8.7008 -4.1459 0.40729 -0.45686 -1.0082 0.025862 -0.53684 0.1759 -1.0955 0"
    ];

    // Send each message.
    var submitTime = 0;
    for (let k = 0; k < numMessages; k += 1) {
      console.log("Sending Iot Data " + k);
      const t0 = Date.now();
      await program.rpc.sendIotData(messages[k], {
        accounts: {
          iotSource,
          authority,
          iotDataStore: iotDataStore.publicKey,
        },
      });
      const t1 = Date.now() - t0;
      submitTime = submitTime + t1;
      console.log("Submit time : " + t1 + " ms");
    }
    console.log("Total submit time : " + submitTime + " ms");

    // Check the iot data store state is as expected.
    const iot_data = await program.account.iotDataStore.fetch(iotDataStore.publicKey);
    const name = new TextDecoder("utf-8").decode(new Uint8Array(iot_data.name));
    assert.ok(name.startsWith("Test Iot Data")); // [u8; 280] => trailing zeros.
    assert.ok(iot_data.iotDataFeed.length === 33607);
    assert.ok(iot_data.head.toNumber() === numMessages);
    assert.ok(iot_data.tail.toNumber() === 0);
    iot_data.iotDataFeed.forEach((msg, idx) => {
      if (idx < 100) {
        const data = new TextDecoder("utf-8").decode(new Uint8Array(msg.data));
        console.log("Message", data);
        assert.ok(msg.from.equals(iotSource));
        assert.ok(data.startsWith(messages[idx]));
      } else {
        assert.ok(anchor.web3.PublicKey.default);
        assert.ok(
          JSON.stringify(msg.data) === JSON.stringify(new Array(280).fill(0))
        );
      }
    });
    console.log("");
    console.log("Total submit time : " + submitTime + " ms");
    console.log("TPS : " + numMessages/(submitTime/1000));
  });
});


/*
describe('iot', () => {

  // Use a local provider.
  const provider = anchor.Provider.local();

  // Configure the client to use the local cluster.
  anchor.setProvider(provider);

  it("Creates and initializes an account in two different transactions", async () => {
    // The program owning the account to create.
    const program = anchor.workspace.Iot;

    // The Account to create.
    const iotAccount = anchor.web3.Keypair.generate();

    // Create account transaction.
    const tx = new anchor.web3.Transaction();
    tx.add(
      anchor.web3.SystemProgram.createAccount({
        fromPubkey: provider.wallet.publicKey,
        newAccountPubkey: iotAccount.publicKey,
        space: 8 + 8,
        lamports: await provider.connection.getMinimumBalanceForRentExemption(
          8 + 8
        ),
        programId: program.programId,
      })
    );

    // Execute the transaction against the cluster.
    await provider.send(tx, [iotAccount]);

    // Execute the RPC.
    // #region code-separated
    await program.rpc.initialize(new anchor.BN(1234), {
      accounts: {
        iotAccount: iotAccount.publicKey,
        rent: anchor.web3.SYSVAR_RENT_PUBKEY,
      },
    });
    // #endregion code-separated

    // Fetch the newly created account from the cluster.
    const account = await program.account.iotAccount.fetch(iotAccount.publicKey);

    // Check it's state was initialized.
    assert.ok(account.data.eq(new anchor.BN(1234)));
  });

  // Reference to an account to use between multiple tests.
  let _iotAccount = undefined;

  it("Creates and initializes an account in a single atomic transaction", async () => {
    // The program to execute.
    const program = anchor.workspace.Iot;

    // #region code
    // The Account to create.
    const iotAccount = anchor.web3.Keypair.generate();

    // Atomically create the new account and initialize it with the program.
    await program.rpc.initialize(new anchor.BN(1234), {
      accounts: {
        iotAccount: iotAccount.publicKey,
        rent: anchor.web3.SYSVAR_RENT_PUBKEY,
      },
      signers: [iotAccount],
      instructions: [
        anchor.web3.SystemProgram.createAccount({
          fromPubkey: provider.wallet.publicKey,
          newAccountPubkey: iotAccount.publicKey,
          space: 8 + 8, // Add 8 for the account discriminator.
          lamports: await provider.connection.getMinimumBalanceForRentExemption(
            8 + 8
          ),
          programId: program.programId,
        }),
      ],
    });

    // Fetch the newly created account from the cluster.
    const account = await program.account.iotAccount.fetch(iotAccount.publicKey);

    // Check it's state was initialized.
    assert.ok(account.data.eq(new anchor.BN(1234)));
    // #endregion code
  });

  it("Creates and initializes an account in a single atomic transaction (simplified)", async () => {
    // The program to execute.
    const program = anchor.workspace.Iot;

    // The Account to create.
    const iotAccount = anchor.web3.Keypair.generate();

    // Atomically create the new account and initialize it with the program.
    // #region code-simplified
    await program.rpc.initialize(new anchor.BN(1234), {
      accounts: {
        iotAccount: iotAccount.publicKey,
        rent: anchor.web3.SYSVAR_RENT_PUBKEY,
      },
      signers: [iotAccount],
      instructions: [await program.account.iotAccount.createInstruction(iotAccount)],
    });
    // #endregion code-simplified

    // Fetch the newly created account from the cluster.
    const account = await program.account.iotAccount.fetch(iotAccount.publicKey);

    // Check it's state was initialized.
    assert.ok(account.data.eq(new anchor.BN(1234)));

    // Store the account for the next test.
    _iotAccount = iotAccount;
  });

  it("Updates a previously created account", async () => {
    const iotAccount = _iotAccount;

    // #region update-test

    // The program to execute.
    const program = anchor.workspace.Iot;

    // Invoke the update rpc.
    await program.rpc.update(new anchor.BN(4321), {
      accounts: {
        iotAccount: iotAccount.publicKey,
      },
    });

    // Fetch the newly updated account.
    const account = await program.account.iotAccount.fetch(iotAccount.publicKey);

    // Check it's state was mutated.
    assert.ok(account.data.eq(new anchor.BN(4321)));

    // #endregion update-test
  });
});
*/
